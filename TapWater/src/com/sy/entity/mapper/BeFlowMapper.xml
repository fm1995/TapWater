<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sy.mappdao.BeFlowMapper" >
  <resultMap id="BaseResultMap" type="com.sy.entity.BeFlow" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="step_name" property="stepName" jdbcType="VARCHAR" />
    <result column="dept_id" property="deptId" jdbcType="INTEGER" />
    <result column="type1" property="type1" jdbcType="INTEGER" />
    <result column="type2" property="type2" jdbcType="INTEGER" />
    <result column="type3" property="type3" jdbcType="INTEGER" />
    <result column="type4" property="type4" jdbcType="INTEGER" />
    <result column="type5" property="type5" jdbcType="INTEGER" />
    <result column="type6" property="type6" jdbcType="INTEGER" />
    <result column="type7" property="type7" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, step_name, dept_id, type1, type2, type3, type4, type5, type6, type7
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.sy.entity.BeFlowExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from be_flow
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from be_flow
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from be_flow
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sy.entity.BeFlowExample" >
    delete from be_flow
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sy.entity.BeFlow" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into be_flow (step_name, dept_id, type1, 
      type2, type3, type4, 
      type5, type6, type7
      )
    values (#{stepName,jdbcType=VARCHAR}, #{deptId,jdbcType=INTEGER}, #{type1,jdbcType=INTEGER}, 
      #{type2,jdbcType=INTEGER}, #{type3,jdbcType=INTEGER}, #{type4,jdbcType=INTEGER}, 
      #{type5,jdbcType=INTEGER}, #{type6,jdbcType=INTEGER}, #{type7,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.sy.entity.BeFlow" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into be_flow
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="stepName != null" >
        step_name,
      </if>
      <if test="deptId != null" >
        dept_id,
      </if>
      <if test="type1 != null" >
        type1,
      </if>
      <if test="type2 != null" >
        type2,
      </if>
      <if test="type3 != null" >
        type3,
      </if>
      <if test="type4 != null" >
        type4,
      </if>
      <if test="type5 != null" >
        type5,
      </if>
      <if test="type6 != null" >
        type6,
      </if>
      <if test="type7 != null" >
        type7,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="stepName != null" >
        #{stepName,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null" >
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="type1 != null" >
        #{type1,jdbcType=INTEGER},
      </if>
      <if test="type2 != null" >
        #{type2,jdbcType=INTEGER},
      </if>
      <if test="type3 != null" >
        #{type3,jdbcType=INTEGER},
      </if>
      <if test="type4 != null" >
        #{type4,jdbcType=INTEGER},
      </if>
      <if test="type5 != null" >
        #{type5,jdbcType=INTEGER},
      </if>
      <if test="type6 != null" >
        #{type6,jdbcType=INTEGER},
      </if>
      <if test="type7 != null" >
        #{type7,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sy.entity.BeFlowExample" resultType="java.lang.Integer" >
    select count(*) from be_flow
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update be_flow
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.stepName != null" >
        step_name = #{record.stepName,jdbcType=VARCHAR},
      </if>
      <if test="record.deptId != null" >
        dept_id = #{record.deptId,jdbcType=INTEGER},
      </if>
      <if test="record.type1 != null" >
        type1 = #{record.type1,jdbcType=INTEGER},
      </if>
      <if test="record.type2 != null" >
        type2 = #{record.type2,jdbcType=INTEGER},
      </if>
      <if test="record.type3 != null" >
        type3 = #{record.type3,jdbcType=INTEGER},
      </if>
      <if test="record.type4 != null" >
        type4 = #{record.type4,jdbcType=INTEGER},
      </if>
      <if test="record.type5 != null" >
        type5 = #{record.type5,jdbcType=INTEGER},
      </if>
      <if test="record.type6 != null" >
        type6 = #{record.type6,jdbcType=INTEGER},
      </if>
      <if test="record.type7 != null" >
        type7 = #{record.type7,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update be_flow
    set id = #{record.id,jdbcType=INTEGER},
      step_name = #{record.stepName,jdbcType=VARCHAR},
      dept_id = #{record.deptId,jdbcType=INTEGER},
      type1 = #{record.type1,jdbcType=INTEGER},
      type2 = #{record.type2,jdbcType=INTEGER},
      type3 = #{record.type3,jdbcType=INTEGER},
      type4 = #{record.type4,jdbcType=INTEGER},
      type5 = #{record.type5,jdbcType=INTEGER},
      type6 = #{record.type6,jdbcType=INTEGER},
      type7 = #{record.type7,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sy.entity.BeFlow" >
    update be_flow
    <set >
      <if test="stepName != null" >
        step_name = #{stepName,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null" >
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="type1 != null" >
        type1 = #{type1,jdbcType=INTEGER},
      </if>
      <if test="type2 != null" >
        type2 = #{type2,jdbcType=INTEGER},
      </if>
      <if test="type3 != null" >
        type3 = #{type3,jdbcType=INTEGER},
      </if>
      <if test="type4 != null" >
        type4 = #{type4,jdbcType=INTEGER},
      </if>
      <if test="type5 != null" >
        type5 = #{type5,jdbcType=INTEGER},
      </if>
      <if test="type6 != null" >
        type6 = #{type6,jdbcType=INTEGER},
      </if>
      <if test="type7 != null" >
        type7 = #{type7,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sy.entity.BeFlow" >
    update be_flow
    set step_name = #{stepName,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=INTEGER},
      type1 = #{type1,jdbcType=INTEGER},
      type2 = #{type2,jdbcType=INTEGER},
      type3 = #{type3,jdbcType=INTEGER},
      type4 = #{type4,jdbcType=INTEGER},
      type5 = #{type5,jdbcType=INTEGER},
      type6 = #{type6,jdbcType=INTEGER},
      type7 = #{type7,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>